name: Release Helm Chart and Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release-helm:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      chart-version: ${{ steps.chart-release.outputs.chart-version }}
      release-created: ${{ steps.chart-release.outputs.release-created }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Package and upload helm chart
        id: chart-release
        run: |
          # download helm chart releaser
          curl -sSLo cr.tar.gz "https://github.com/helm/chart-releaser/releases/download/v1.6.0/chart-releaser_1.6.0_linux_amd64.tar.gz"
          tar -xzf cr.tar.gz
          rm -f cr.tar.gz
          
          owner=$(cut -d '/' -f 1 <<< "$GITHUB_REPOSITORY")
          repo=$(cut -d '/' -f 2 <<< "$GITHUB_REPOSITORY")
          
          # Extract chart version before packaging
          CHART_VERSION=$(grep '^version:' deploy/$repo/Chart.yaml | awk '{print $2}' | tr -d '"')
          echo "chart-version=$CHART_VERSION" >> $GITHUB_OUTPUT
          echo "Chart version: $CHART_VERSION"
          
          # package chart
          ./cr package deploy/$repo
          
          # Check if release already exists
          if gh release view "v$CHART_VERSION" >/dev/null 2>&1; then
            echo "Release v$CHART_VERSION already exists, skipping upload"
            echo "release-created=false" >> $GITHUB_OUTPUT
          else
            # upload chart to github releases
            ./cr upload \
                --owner "$owner" \
                --git-repo "$repo" \
                --token "${{ secrets.GITHUB_TOKEN }}" \
                --release-name-template "v{{ .Version }}"
            
            echo "release-created=true" >> $GITHUB_OUTPUT
            
            # update index and push to github pages
            git config user.email "$owner@users.noreply.github.com"
            git config user.name "$owner"
            ./cr index \
                --owner "$owner" \
                --git-repo "$repo" \
                --token "${{ secrets.GITHUB_TOKEN }}" \
                --release-name-template "v{{ .Version }}" \
                --index-path ./index.yaml \
                --push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-docker:
    needs: release-helm
    if: needs.release-helm.outputs.release-created == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ needs.release-helm.outputs.chart-version }}
            ghcr.io/${{ github.repository }}:v${{ needs.release-helm.outputs.chart-version }}
          build-args: |
            VERSION=${{ needs.release-helm.outputs.chart-version }}
          labels: |
            org.opencontainers.image.created=${{ github.run_id }}
            org.opencontainers.image.version=${{ needs.release-helm.outputs.chart-version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

  update-release-notes:
    needs: [release-helm, release-docker]
    if: needs.release-helm.outputs.release-created == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add commit digest and Docker info to GH release
        run: |
          git fetch --tags
          CURRENT_TAG="v${{ needs.release-helm.outputs.chart-version }}"
          LAST_TAG=$(git tag --list 'v*' --sort=-v:refname | grep -v "$CURRENT_TAG" | head -n 1)
          
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline ${LAST_TAG}..HEAD | sed 's/^/- /')
            CHANGES_SECTION="### Changes since \`${LAST_TAG}\`\n\n${COMMITS}\n\n"
          else
            CHANGES_SECTION="### Initial Release\n\n"
          fi
          
          DOCKER_INFO="### Docker Images\n\n"
          DOCKER_INFO+="- \`ghcr.io/${{ github.repository }}:${{ needs.release-helm.outputs.chart-version }}\`\n"
          DOCKER_INFO+="- \`ghcr.io/${{ github.repository }}:v${{ needs.release-helm.outputs.chart-version }}\`\n\n"
          
          HELM_INFO="### Helm Chart\n\n"
          HELM_INFO+="Add the repository:\n"
          HELM_INFO+="\`\`\`bash\n"
          HELM_INFO+="helm repo add ${{ github.repository_owner }}-${{ github.event.repository.name }} https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}\n"
          HELM_INFO+="helm repo update\n"
          HELM_INFO+="\`\`\`\n\n"
          HELM_INFO+="Install the chart:\n"
          HELM_INFO+="\`\`\`bash\n"
          HELM_INFO+="helm install my-cert-manager-webhook-inwx ${{ github.repository_owner }}-${{ github.event.repository.name }}/${{ github.event.repository.name }} --version ${{ needs.release-helm.outputs.chart-version }}\n"
          HELM_INFO+="\`\`\`\n"
          
          # Combine all sections
          echo -e "${CHANGES_SECTION}${DOCKER_INFO}${HELM_INFO}" > release_notes.md
          
          gh release edit "$CURRENT_TAG" --notes-file release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}